Index: src/htmlparser/fsm_config.py
===================================================================
--- src/htmlparser/fsm_config.py	(revision 141)
+++ src/htmlparser/fsm_config.py	(working copy)
@@ -64,15 +64,15 @@
 
   # Below are all we have to define in addition to what DictMixin would need
   def __len__(self):
-    return len(self.keys())
+    return len(list(self.keys()))
 
   def __contains__(self, key):
-    return self.has_key(key)
+    return key in self
 
   def __iter__(self):
     # It's not as portable -- though it would be more space-efficient -- to do
     #   for k in self.keys(): yield k
-    return iter(self.keys())
+    return iter(list(self.keys()))
 
 class State(object):
   """Contains information about a specific state."""
@@ -210,7 +210,7 @@
 
     self.sm['state'] = self.AddState
     self.sm['condition'] = self.AddCondition
-    execfile(filename, self.sm)
+    exec(compile(open(filename).read(), filename, 'exec'), self.sm)
     self.name = self.sm['name']
     if not self.name.isalnum():
       raise Exception("State machine name must consist of only alphanumeric"
Index: src/htmlparser/generate_fsm.py
===================================================================
--- src/htmlparser/generate_fsm.py	(revision 141)
+++ src/htmlparser/generate_fsm.py	(working copy)
@@ -264,7 +264,7 @@
     state_table = {}
 
     for state in self._config.states:
-      state_table[state] = [default_state for col in xrange(255)]
+      state_table[state] = [default_state for col in range(255)]
 
     # We process the transition in reverse order while updating the table.
     for i_transition in range(len(self._config.transitions) - 1, -1, -1):
@@ -281,7 +281,7 @@
     # Create the inner lists which map input characters to destination states.
     for state in self._config.states:
       transition_row = []
-      for c in xrange(0, 255):
+      for c in range(0, 255):
         transition_row.append('    /* %06s */ %s' % (repr(chr(c)),
                                                      state_table[state][c]))
 
@@ -306,17 +306,17 @@
   def Generate(self):
     """Returns the generated the C include statements for the statemachine."""
 
-    print '\n'.join((self._CreateHeader(),
+    print('\n'.join((self._CreateHeader(),
                      self._CreateNumStates(),
                      self._CreateStatesEnum(),
                      self._CreateStatesExternal(),
                      self._CreateStatesInternalNames(),
-                     self._CreateTransitionTable()))
+                     self._CreateTransitionTable())))
 
 
 def main():
   if len(sys.argv) != 2:
-    print "usage: generate_fsm.py config_file"
+    print("usage: generate_fsm.py config_file")
     sys.exit(1)
 
   config = FSMConfig()
